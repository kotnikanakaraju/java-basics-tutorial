Leet Code practice:
1)Binary search approaches:
package sorting;

public class Bs1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {-18,-12,-4,0,2,3,4,15,16,18,22,45,89};
		int target =-18;
		int ans=BinarySearch(arr,target);
		System.out.println(ans);
	}
	static int BinarySearch(int[]arr,int target) {
		int start=0;
		int end=arr.length-1;
		
		while(start<=end) {
			//finding mid of element
//			int mid=(start+mid)/2;
			int mid=start+(end-start)/2;
			if(target<arr[mid]) {
				end=mid-1;
			}else if(target>arr[mid]) {
				start=mid+1;
			}else {
				return mid;
			}
			
			
		}
		return -1;
	}

}

2)  Ceiling in java
package sorting;

public class Ceiling {

	public static void main(String[] args) {
		// TODO Auto-generated method stub'
		int[] arr= {2,3,4,6};
		int target =15;
		int ans=ceiling(arr,target);
		System.out.println(ans);

	}
	static int ceiling(int[]arr,int target) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			if(target<arr[mid]) {
				end=mid-1;
			}else if(target>arr[mid]) {
				start=mid+1;
			}else {
				return mid;
			}
		}
		return start;
	}

}



Floor of the number
package sorting;

public class Ceiling {

	public static void main(String[] args) {
		// TODO Auto-generated method stub'
		int[] arr= {2,3,4,6};
		int target =15;
		int ans=ceiling(arr,target);
		System.out.println(ans);

	}
	static int ceiling(int[]arr,int target) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			if(target<arr[mid]) {
				end=mid-1;
			}else if(target>arr[mid]) {
				start=mid+1;
			}else {
				return mid;
			}
		}
		return end;
	}

}
 

First and last element in java:
package sorting;

public class FirstAndLast {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[]nums= {2,4,5,6,6,6,8,5,6,9};
		int target=6;

	}
	public int[] SearchRange(int[]nums,int target) {
		int[] ans= {-1,-1};
		
		//check for first occurence if target first
		
		boolean findStartIndex;
		ans[0]=search(nums,target,findStartIndex);
		ans[1]=search(nums,target,findStartIndex);
		
//		ans[1]=start;
//		ans[1]=end;
		int start=0;
		int end=nums.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			if(target<nums[mid]) {
				end=mid-1;
			}else if(target>nums[mid]) {
				start=mid+1;
			}else {
				return mid;
			}
		}
	}
	//this function just returns the target the index value of target
    int search(int[] nums,int target,boolean findStartIndex) {
    	int start=0;
		int end=nums.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			if(target<nums[mid]) {
				end=mid-1;
			}else if(target>nums[mid]) {
				start=mid+1;
			}else {
//				return mid;
				//potential ans found
				ans=mid;
				if(findStartIndex) {
					end=mid-1;
				}else {
					start=mid+1;
				}
			}
		}
		return ans
    }
}

find the position of element in infinite array:



package sorting;

//find the position of element in infinite array
public class PosOfElement {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[]arr= {3,5,7,8,19,20,90,100,130,140};
		int target=10;
		System.out.println(ans(arr,target));

	}
	static int ans(int[] arr,int target) {
		//first find the range
		//first start with abox of size 2
		int start=0;
		int end=1;
		
		//condition for the target to lie in the range
		while(target<arr[end]) {
			int temp=end+1;
			//doule the box value
			//end=previous end+size of box*2
			end=end+(end-start+1)*2;
			start=temp;
		}
		return binarySearch(arr,target,start,end);
	}
	static int binarySearch(int[] arr,int target,int start,int end) {
		while(start<=end) {
			int mid=start+(end-start)/2;
			if(target<arr[mid]) {
				end=mid-1;
			}else if(target>arr[mid]) {
				start=mid+1;
			}else {
				return mid;
				//potential ans found
//				ans=mid;
//				if(findStartIndex) {
//					end=mid-1;
//				}else {
//					start=mid+1;
//				}
			}
		}
		return -1;
	}

}

Find the peak index mountain element:
package sorting;

public class PeakIndex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= {3,4,5,6,2,1};
		int ans=peakIndexInMountainArray();
		System.out.println(ans(arr));

	}
	public int peakIndexInMountainArray(int[]arr) {
		int start=0;
		int end=arr.length-1;
		
		while(start<end) {
			int mid=start+(end+start)/2;
			if(arr[mid]>arr[mid+1]) {
				//you are in decreasing part of array
				//this may be any ans,but look at left
				//this is why end!=mid-1
				end=mid;
			}else {
				//you aare ascending part of array
				start=mid+1;//because we know that mid+1 element>mid element
			}
		}
		//in the end,start==end and pointing to the largest number because of the 2 checks
		//start and end are always trying to find max element in the above2 checks
		//hence,when they are pointing to just one element,that is max oone because that is what check say
		//more elaboration: at every point of time for start and end ,they have the best possible answer and
		//if we are saying that only one item is remaining hence because of above line that is best possible answer
		return start;//or return end as both are equal. 
}

Find the peak element:
package sorting;

public class PeakIndex {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= {3,4,5,6,2,1};
		int ans=peakIndexInMountainArray();
		System.out.println(ans(arr));

	}
	public int peakIndexInMountainArray(int[]arr) {
		int start=0;
		int end=arr.length-1;
		
		while(start<end) {
			int mid=start+(end+start)/2;
			if(arr[mid]>arr[mid+1]) {
				//you are in decreasing part of array
				//this may be any ans,but look at left
				//this is why end!=mid-1
				end=mid;
			}else {
				//you aare ascending part of array
				start=mid+1;//because we know that mid+1 element>mid element
			}
		}
		//in the end,start==end and pointing to the largest number because of the 2 checks
		//start and end are always trying to find max element in the above2 checks
		//hence,when they are pointing to just one element,that is max oone because that is what check say
		//more elaboration: at every point of time for start and end ,they have the best possible answer and
		//if we are saying that only one item is remaining hence because of above line that is best possible answer
		return start;//or return end as both are equal. 
}


Search in a Rotated sorted array:
package sorting;

public class SearchInRotatedArray {

	public static void main(String[] args) {
		int arr[]= {4,5,6,7,0,1,2};
		System.out.println(findPivot(arr));

	}
	static int Search(int[]arr) {
		int pivot=findPivot(nums);
		
		//if you did not find a pivot,it means the array is not rotated
		if(pivot==-1) {
			//just do normal binary search
			return BinarySearch(nums,target,start:0,end:nums.length-1);
		}
		//if pivot is found,you have found 2 asc sorted arrays
		if(nums[pivot]==target) {
			return pivot;
		}
		if(target>=nums[0]) {
			return BinarySearch(nums,target,start:0,end:pivot-1);
		}
		return BinarySearch(nums,target,start:pivot+1,end:nums.lenght-1);
	}
	static int findPivot(int[]arr) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			//4 cases
			if(mid<end && arr[mid]>arr[mid+1]) {
				return mid;
			}
			if(mid>start && arr[mid]<arr[mid-1]) {
				return mid-1;
			}
			if(arr[mid]<=arr[start]) {
				end=mid-1;
			}else {
				start=mid+1;
			}
		}
		return -1;
	}
	
	static int BinarySearch(int[]arr,int target,int start,int end) {
		int start=0;
		int end=arr.length-1;
		
		while(start<=end) {
			//finding mid of element
//			int mid=(start+mid)/2;
			int mid=start+(end-start)/2;
			if(target<arr[mid]) {
				end=mid-1;
			}else if(target>arr[mid]) {
				start=mid+1;
			}else {
				return mid;
			}
			
			
		}
		return -1;
	}

}

Rotated Binary Search with duplicate values:
package sorting;

public class PivotWithDuplicates {

	public static void main(String[] args) {
		int arr[]= {2,2,2,3,4,3,9};
		System.out.println(findPivotWithDuplicates(arr));

	}
	static int findPivotWithDuplicates(int[]arr) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			//4 cases
			if(mid<end && arr[mid]>arr[mid+1]) {
				return mid;
			}
			if(mid>start && arr[mid]<arr[mid-1]) {
				return mid-1;
			}
			
			//if elements at middle,start,end are equal then skip the duplicates
			if(arr[mid]==arr[start] && arr[mid]==arr[end]) {
				//skip the duplicates
				
				//note: what if these elements at start and end were the pivot
				//check if start is pivot;
				if(arr[start]>arr[start+1]) {
					return start;
				}
				start++;
				//check whether end is pivot
				if(arr[end]<arr[end-1]) {
					return end-1;
				}
				end--;
			}
			//left side is sorted so pivot should be in right
			else if(arr[start]<arr[mid]||(arr[start]==arr[mid] && arr[mid]>arr[end])) {
				start=mid+1;
			}else {
				end=mid-1;
			}
		}
		return -1;
	}

}


Rotation count:
package sorting;

public class RotationCount {

	public static void main(String[] args) {
		int arr[]= {4,5,6,7,0,1,2};
		System.out.println(CountRotations(arr));

	}
	private static int CountRotations(int[]arr) {
		int pivot=findPivot(arr);
		return pivot+1;
		
	}
	static int findPivot(int[]arr) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			//4 cases
			if(mid<end && arr[mid]>arr[mid+1]) {
				return mid;
			}
			if(mid>start && arr[mid]<arr[mid-1]) {
				return mid-1;
			}
			if(arr[mid]<=arr[start]) {
				end=mid-1;
			}else {
				start=mid+1;
			}
		}
		return -1;
	}
	
	static int findPivotWithDuplicates(int[]arr) {
		int start=0;
		int end=arr.length-1;
		while(start<=end) {
			int mid=start+(end-start)/2;
			//4 cases
			if(mid<end && arr[mid]>arr[mid+1]) {
				return mid;
			}
			if(mid>start && arr[mid]<arr[mid-1]) {
				return mid-1;
			}
			
			//if elements at middle,start,end are equal then skip the duplicates
			if(arr[mid]==arr[start] && arr[mid]==arr[end]) {
				//skip the duplicates
				
				//note: what if these elements at start and end were the pivot
				//check if start is pivot;
				if(arr[start]>arr[start+1]) {
					return start;
				}
				start++;
				//check whether end is pivot
				if(arr[end]<arr[end-1]) {
					return end-1;
				}
				end--;
			}
			//left side is sorted so pivot should be in right
			else if(arr[start]<arr[mid]||(arr[start]==arr[mid] && arr[mid]>arr[end])) {
				start=mid+1;
			}else {
				end=mid-1;
			}
		}
		return -1;
	}


}


